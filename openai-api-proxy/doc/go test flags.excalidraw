{
  "type": "excalidraw",
  "version": 2,
  "source": "https://draw.0voice.com",
  "elements": [
    {
      "id": "ZIFfD1IJamPWR0KvL4jHQ",
      "type": "text",
      "x": 330.66668701171875,
      "y": 182.66668701171875,
      "width": 643,
      "height": 133,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 1588861165,
      "version": 354,
      "versionNonce": 621209293,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1683470029367,
      "link": null,
      "locked": false,
      "text": "golang单元测试\n1.功能测试，检查应用程序是否按预期输出结果\n2.性能测试，衡量固定条件，应用程序的性能\n3.模糊测试，输入预期之外的输入，检查程序是否会出现意料之外的情况\n4.http测试，针对http接口的测试",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 128,
      "containerId": null,
      "originalText": "golang单元测试\n1.功能测试，检查应用程序是否按预期输出结果\n2.性能测试，衡量固定条件，应用程序的性能\n3.模糊测试，输入预期之外的输入，检查程序是否会出现意料之外的情况\n4.http测试，针对http接口的测试"
    },
    {
      "id": "--gKVKxRbB9l53A3O_QRX",
      "type": "text",
      "x": 330.00006103515625,
      "y": 352.8333435058594,
      "width": 874,
      "height": 421,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 645563693,
      "version": 1008,
      "versionNonce": 453110989,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1683477499695,
      "link": null,
      "locked": false,
      "text": "go test flags 说明\n\n-bench regexp 运行表达式匹配的性能测试用例\n-benchtime t 指定每一个基准测试的运行时间或运行次数，默认1s,特殊语法：Nx 表示运行N次\n-count n 指定功能测试、基准测试、模糊测试运行n次，相当于执行n次go test 命令\n         如果指定了-cpu 则为每个GOMAXPROCS运行n次\n-cpu 1,2,4 表示go test 将会执行3次，其中GOMAXPROCS的值分别为1，2,4\n-cover 启用覆盖率分析\n\n性能测试指标导出\n-benchmem 打印基准测试的内存分配统计信息\n-blockprofile block.out 测试完成时将goroutine的阻塞数据写入指定文件\n-cpuprofile cpu.out 测试完成时将CPU使用数据写入指定文件\n-memprofile mem.out 测试完成时将内存使用数据写入指定文件\n-mutexprofile mutex.out 测试完成时将协程互斥锁数据写入指定文件\n-outputdir directory 指定数据输出目录",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 416,
      "containerId": null,
      "originalText": "go test flags 说明\n\n-bench regexp 运行表达式匹配的性能测试用例\n-benchtime t 指定每一个基准测试的运行时间或运行次数，默认1s,特殊语法：Nx 表示运行N次\n-count n 指定功能测试、基准测试、模糊测试运行n次，相当于执行n次go test 命令\n         如果指定了-cpu 则为每个GOMAXPROCS运行n次\n-cpu 1,2,4 表示go test 将会执行3次，其中GOMAXPROCS的值分别为1，2,4\n-cover 启用覆盖率分析\n\n性能测试指标导出\n-benchmem 打印基准测试的内存分配统计信息\n-blockprofile block.out 测试完成时将goroutine的阻塞数据写入指定文件\n-cpuprofile cpu.out 测试完成时将CPU使用数据写入指定文件\n-memprofile mem.out 测试完成时将内存使用数据写入指定文件\n-mutexprofile mutex.out 测试完成时将协程互斥锁数据写入指定文件\n-outputdir directory 指定数据输出目录"
    },
    {
      "id": "a59bsFMLytsTbCIBOIbD_",
      "type": "text",
      "x": 330,
      "y": 819.5,
      "width": 526,
      "height": 160,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 77178110,
      "version": 454,
      "versionNonce": 1455814626,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1683554041874,
      "link": null,
      "locked": false,
      "text": "pprof性能分析指标\n1. Flat: 函数自身运行消耗的资源\n2. Flat%: 函数自身运行消耗资源的百分比\n3. Sum%: 当前行的Flat% 与 上面所有行的Flat%的总和\n4. Cum： 当前函数与其调用栈的资源总消耗\n5. Cum%: 当前函数与其调用栈的资源总消耗比例",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 155,
      "containerId": null,
      "originalText": "pprof性能分析指标\n1. Flat: 函数自身运行消耗的资源\n2. Flat%: 函数自身运行消耗资源的百分比\n3. Sum%: 当前行的Flat% 与 上面所有行的Flat%的总和\n4. Cum： 当前函数与其调用栈的资源总消耗\n5. Cum%: 当前函数与其调用栈的资源总消耗比例"
    },
    {
      "id": "yYXeLd6wsb8dFUGDE_VhF",
      "type": "text",
      "x": 328,
      "y": 1011.5,
      "width": 727,
      "height": 107,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 597637054,
      "version": 367,
      "versionNonce": 1651259006,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1683554228119,
      "link": null,
      "locked": false,
      "text": "pprof 三个常用指令\n1. top n: 列出资源小前n条记录，根据Flat倒排\n2. list regexp: 根据表达式查看源码，定位性能消耗最大的代码所在位置\n3. web : 生成svg图片，并通过浏览器展示（前提：必须安装graphviz 插件）",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 101,
      "containerId": null,
      "originalText": "pprof 三个常用指令\n1. top n: 列出资源小前n条记录，根据Flat倒排\n2. list regexp: 根据表达式查看源码，定位性能消耗最大的代码所在位置\n3. web : 生成svg图片，并通过浏览器展示（前提：必须安装graphviz 插件）"
    },
    {
      "id": "pj3VmDGS-xxWLo-tS_o_1",
      "type": "text",
      "x": 336,
      "y": 1178.1666564941406,
      "width": 521,
      "height": 133,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "roundness": null,
      "seed": 1473290046,
      "version": 406,
      "versionNonce": 1742350498,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1683560209932,
      "link": null,
      "locked": false,
      "text": "dockerfile中ADD与COPY 异同\n1.ADD与COPY 都可以从上下文中复制文件到临时容器\n2.ADD 可以下载网络文件\n3.ADD 从上下文中添加归档文件（tar.gz等）会自动解压\n4.COPY 可以从之前的构建阶段中拷贝文件",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 128,
      "containerId": null,
      "originalText": "dockerfile中ADD与COPY 异同\n1.ADD与COPY 都可以从上下文中复制文件到临时容器\n2.ADD 可以下载网络文件\n3.ADD 从上下文中添加归档文件（tar.gz等）会自动解压\n4.COPY 可以从之前的构建阶段中拷贝文件"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}